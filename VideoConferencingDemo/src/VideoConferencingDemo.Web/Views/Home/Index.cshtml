@{
    ViewData["Title"] = "Home Page";
}

@section Styles
{
    <style>
        #live {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            width: 100%;
            height: 100%;
            background-color: #000;
            display: none;
        }

        #local-video {
            position: absolute;
            bottom: 0;
            left: 0;
            width: 250px;
            -webkit-transform: scaleX(-1);
            transform: scaleX(-1);
            margin: 16px;
            border: 2px solid #fff;
        }

        #remote-video {
            position: absolute;
            max-width: 100%;
            height: 100%;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }

        #end-call {
            position: absolute;
            bottom: 0;
            right: 0;
            padding: 8px;
            background-color: red;
            color: white;
            border: none;
            margin: 16px;
        }
    </style>
}
<div class="row">
    <div class="col-md-6">
        @*<div class="text-center">*@
        <h1 class="display-3 mb-3">Free premium video meetings for everyone</h1>
            

            <div id="menu">
                <p>Your ID:</p>
                <p id="uuid"></p>
                <input type="text" placeholder="Peer id" />
                <button onclick="callUser()">Connect</button>
            </div>

            <div id="live">
                <video id="remote-video"></video>
                <video id="local-video" autoplay="true" muted="muted"></video>
                <button id="end-call" onclick="endCall()">End Call</button>
            </div>
            <p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
     

        <button type="button" class="btn btn-outline-primary mb-3">Create new meeting</button>

        <form class="row g-3">
            <div class="col-auto mb-3">
                <input type="text" class="form-control" placeholder="Join a meeting">
            </div>
            <div class="col-auto">
                <button type="submit" class="btn btn-primary mb-3">Join</button>
            </div>
        </form>
    </div>
    <div class="col-md-6">
        <img src="~/images/Online-meeting.jpg" class="img-fluid" alt="meeting-image">
    </div>
</div>
@section Scripts
{
    <script src="~/peerjs/peerjs-1.4.7.min.js"></script>
    <script>
        const peer = new Peer();
        var currentCall;
        peer.on("open", function (id) {
            document.getElementById("uuid").textContent = id;
        });

        async function callUser() {
            // get the id entered by the user
            const peerId = document.querySelector("input").value;
            // grab the camera and mic
            const stream = await navigator.mediaDevices.getUserMedia({
                video: true,
                audio: true,
            });
            // switch to the video call and play the camera preview
            document.getElementById("menu").style.display = "none";
            document.getElementById("live").style.display = "block";
            document.getElementById("local-video").srcObject = stream;
            document.getElementById("local-video").play();
            // make the call
            const call = peer.call(peerId, stream);
            call.on("stream", (stream) => {
                document.getElementById("remote-video").srcObject = stream;
                document.getElementById("remote-video").play();
            });
            call.on("data", (stream) => {
                document.querySelector("#remote-video").srcObject = stream;
            });
            call.on("error", (err) => {
                console.log(err);
            });
            call.on('close', () => {
                endCall()
            })
            // save the close function
            currentCall = call;
        };

        peer.on("call", (call) => {
            if (confirm(`Accept call from ${call.peer}?`)) {
                // grab the camera and mic
                navigator.mediaDevices
                    .getUserMedia({ video: true, audio: true })
                    .then((stream) => {
                        // play the local preview
                        document.querySelector("#local-video").srcObject = stream;
                        document.querySelector("#local-video").play();
                        // answer the call
                        call.answer(stream);
                        // save the close function
                        currentCall = call;
                        // change to the video view
                        document.querySelector("#menu").style.display = "none";
                        document.querySelector("#live").style.display = "block";
                        call.on("stream", (remoteStream) => {
                            // when we receive the remote stream, play it
                            document.getElementById("remote-video").srcObject = remoteStream;
                            document.getElementById("remote-video").play();
                        });
                    })
                    .catch((err) => {
                        console.log("Failed to get local stream:", err);
                    });
            } else {
                // user rejected the call, close it
                call.close();
            }
        });

        function endCall() {
            // Go back to the menu
            document.querySelector("#menu").style.display = "block";
            document.querySelector("#live").style.display = "none";
            // If there is no current call, return
            if (!currentCall) return;
            // Close the call, and reset the function
            try {
                currentCall.close();
            } catch { }
            currentCall = undefined;
        }
    </script>
}
